how our data looks like:

data = {
  threads: {
    t1: {
      '.key': 't1'
      title: 'Hello',
      publishedAt : '',
      posts: {
        p1: 'p1'
      },
      userId: 'u1'
    }
  },

  posts: {
    p1: {
      '.key': 'p1',
      text: 'Hello'
      publishedAt : '',
      userId: 'u1',
      threadId: 't1'
    }
  },

  users: {
    u1: {
      name: 'Alex',
      '.key': 'u1',
      threads: {
        't1'
      },
      posts: {
        'p1'
      }
    }
  },

  forums: {
    f1: {
      '.key': 'f1',
      name: 'fishing',
      description: '',
      categoryId: 'c1',
      threads: {
        t1: 't1'
      }
    }
  },

  categories: {
    c1: {
      '.key': 'c1',
      name: 'Discussions',
      forums: {
        f1: 'f1'
      }
    }
  }
}

we use '.key' as firebase doen't understand such kind of syntax
but in js we can access like posts['.key']


let's use some data.json file to store our data in src

in order to use @ as src path we must configure webpack and alias especially
it is called absolute path

in order to use better css styles we can do several things
- style module: we create styles in vue file with prefix module and then bind class to element in template:
  <template lang="pug">
    div(class="col-full" :class="$style.centered")
      h1(:class="$style.headingLarge") Not Found
      p(:class="$style.textLarge") Ooops, we couldn't find what you are looking for. Why don't you
        router-link(:to="{name: 'pagehome'}")  go home instead?
  </template>
  
  
  <style module>
    .headingLarge {
      font-size: 100px
    }
    .textLarge {
      font-size: 50px;
      font-weight: 100;
    }
    .centered {
      text-align: center;
    }
  </style>


  Math.floor(new Date.now() / 1000) // convert date to seconds


Desctructuring: 

const person = {
  firstName: 'test',
  lastName: 'test2',
  age: 15
}

let {firstName, lastName, age} = person

But we can also select in different orders and we must enclose it into brackets:
({firstName, lastName, age} = person)

If we want to assign with different variable name we should do like this:
let {firstName: fn} = person
console.log(fn) // test

Default value
let {firstName = 'Iska'} = person

Default with given name:
let {firstName: fn = 'Iska'} = person


Human friendly dates
we install moment
use filters to show date in human friendly format


Naming for components that we use through all aplication and accepting props we name it:
App.. or Base..
 - AppDate, BaseEditor and etc

For single component which can be used once on page or doesn't accept any props we name it:
The...
 - TheNavbar



 The best practice to save in utils folder functions that can be used through the project




 Primitives: string, number, bool, null, undefined    are copied by value
 Objects: object, array, function   are copied by reference

 This means that when you simply assign one primitive to another you copy the whole value, but in case of Objects
 you copy only reference to memory where value is stored:

 let name = 'Iska'
 let name2 = name
 
 // so when you change name2 to Boho you don't change name


 But:

 let person = {
   name: 'Iska',
   age: 22
 }

 let person2 = person

 // so person2 and person stores only reference to <#1234> where data is located, when you change person2.name = 'Boho'
 // generally person.name is also changed

 So solution is to clone objects:
 
 let person = {
   name: 'Iska',
   age: 22
 }

let person2 = {...person} // spread operator clones object and save new in another place in memory

same with arrays:
let animal = ['dog', 'cat']
let animal2 = [...animal]


But pitfall is that if object contains nested object above method fails, so it is better to use simple logic:

let animal2 = JSON.parse(JSON.stringify(animal))


Good practice is to receive from back time in unix timestamps


It is important to place routes in router/index.js such that at first place routes without dynamic params:
1. path: '/thread/create'
2. path: '/thread/:id'



If we need to display conditional dom elements we can wrap it into â‰¤template> tag:

div(v-if="hello") Hello
div(v-if="hello") world


or 

template(v-if="hello")
  div Hello
  div world



In order to connect project with firebase we need:
1. Create project in firebase
2. Add firebase package to project
3. Initialize configs in main.js

Initialize realtime database  and import our data.json, but we should remove .key property as firebase can't read them


firebase tools installation : yarn global add firebase-tools
then login to firebase : firebase login
then initialize firebase in project : firebase init

when we make changes in firebase configs then we have to deploy changes by : firebase deploy


firebase database:set / src/data.json      -  to seed database



Environment variables:
create file .env and transfer configs of firebase to there

all configs should start from VUE_APP_